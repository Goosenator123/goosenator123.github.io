{"version":3,"file":"bundle82862cd6cffb1ccc23dc.js","mappings":";;;;;;;;;;;;;;AAAA,iEAAe,qBAAuB,wDAAwD;;;;;;UCA9F;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyD;AACzD,kCAAkC,2DAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://school-2024/./src/assets/bgMusic.mp3","webpack://school-2024/webpack/bootstrap","webpack://school-2024/webpack/runtime/define property getters","webpack://school-2024/webpack/runtime/global","webpack://school-2024/webpack/runtime/hasOwnProperty shorthand","webpack://school-2024/webpack/runtime/make namespace object","webpack://school-2024/webpack/runtime/publicPath","webpack://school-2024/./src/js/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"assets/bgMusic.5ad978a5c254a33f244b89c5689cb11e.mp3\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// -------------------------------\r\n// Dynamically load dat.GUI from CDN\r\n// -------------------------------\r\nfunction loadScript(url, callback) {\r\n  const script = document.createElement(\"script\");\r\n  script.type = \"text/javascript\";\r\n  script.src = url;\r\n  script.onload = callback;\r\n  document.head.appendChild(script);\r\n}\r\n  \r\n// -------------------------------\r\n// Intro Page & Sound Effects\r\n// -------------------------------\r\nconst intro = document.getElementById(\"intro\");\r\nconst startButton = document.getElementById(\"startButton\");\r\nimport backgroundMusicAudio from \"../assets/bgMusic.mp3\";\r\nconst backgroundMusic = new Audio(backgroundMusicAudio);\r\nbackgroundMusic.loop = true;\r\n  \r\nstartButton.addEventListener(\"click\", function () {\r\n  intro.style.display = \"none\";\r\n  backgroundMusic.volume = 0.5;\r\n  backgroundMusic.play();\r\n});\r\n  \r\n// -------------------------------\r\n// Canvas Configuration\r\n// -------------------------------\r\nconst canvas = document.querySelector(\"canvas\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n  \r\nfunction setCanvasSize() {\r\n  canvas.width = innerWidth;\r\n  canvas.height = innerHeight;\r\n}\r\nsetCanvasSize();\r\nwindow.addEventListener(\"resize\", setCanvasSize);\r\n  \r\n// -------------------------------\r\n// Control Object for dat.GUI and Other Settings\r\n// -------------------------------\r\nconst controls = {\r\n  waveAmplitude: 100,\r\n  waveFrequency: 0.01,\r\n  gravity: 0.5,\r\n  wind: 0,\r\n  // Updated clearBalls: Trigger explosion for each ball then clear after a short delay.\r\n  clearBalls: function () {\r\n    balls.forEach((ball) => createExplosion(ball));\r\n    setTimeout(() => {\r\n      balls = [];\r\n    }, 100);\r\n  },\r\n  spawnBall: function () {\r\n    balls.push(new Ball(Math.random() * canvas.width));\r\n  },\r\n};\r\n  \r\n// -------------------------------\r\n// Dynamic Wave Background\r\n// -------------------------------\r\nconst wave = {\r\n  length: 0.005, // Wave length\r\n  amplitude: controls.waveAmplitude,\r\n  frequency: controls.waveFrequency,\r\n};\r\n  \r\nlet increment = wave.frequency;\r\n  \r\n// getWaveY returns the current y-value of the wave at a given x.\r\nfunction getWaveY(x) {\r\n  return (\r\n    canvas.height / 1.5 +\r\n    Math.sin(x * wave.length + increment) * wave.amplitude * Math.cos(increment)\r\n  );\r\n}\r\n  \r\nfunction clearScreen() {\r\n  ctx.fillStyle = \"#222\";\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n}\r\n  \r\nfunction drawWave() {\r\n    ctx.beginPath();\r\n    const startY =\r\n      canvas.height / 1.5 +\r\n      Math.sin(0 * wave.length + increment) * wave.amplitude * Math.cos(increment);\r\n    ctx.moveTo(0, startY);\r\n    for (let i = 0; i < canvas.width; i += 0.5) {\r\n      const waveHeight =\r\n        canvas.height / 1.5 +\r\n        Math.sin(i * wave.length + increment) * wave.amplitude * Math.cos(increment);\r\n      ctx.lineTo(i, waveHeight);\r\n    }\r\n    // Connect the end of the wave to the bottom-right corner.\r\n    ctx.lineTo(canvas.width, canvas.height);\r\n    // Draw a line along the bottom of the canvas to the bottom-left corner.\r\n    ctx.lineTo(0, canvas.height);\r\n    // Close the path back to the starting point.\r\n    ctx.closePath();\r\n    \r\n    // Use fillStyle to fill the closed section.\r\n    const hue = Math.abs(200 * Math.sin(increment));\r\n    ctx.fillStyle = `hsl(${hue}, 50%, 50%)`;\r\n    ctx.fill();\r\n    \r\n    // (Optional: If you still want an outline, you could call ctx.stroke() here.)\r\n    \r\n    // Update increment once per frame.\r\n    increment += wave.frequency;\r\n  }\r\n  \r\n  \r\n// -------------------------------\r\n// Ball Class â€“ Floats on the wave with a gentle spring/damper effect\r\n// and a trail that gradually gets smaller.\r\n// -------------------------------\r\nclass Ball {\r\n  constructor(x) {\r\n    this.x = x;\r\n    this.radius = 25 + Math.random() * 20; // Larger balls on average.\r\n    this.y = -this.radius - Math.random() * 100;\r\n    this.vx = (Math.random() - 0.5) * 4;\r\n    this.vy = 0;\r\n    this.color = this.getRandomColor();\r\n    this.onWave = false;\r\n    this.trail = [];\r\n    this.trailMax = 10;\r\n    this.mass = Math.PI * (this.radius ** 2); // Mass proportional to area.\r\n  }\r\n  getRandomColor() {\r\n    const colors = [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FF33A8\", \"#FFD433\"];\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n  }\r\n  update() {\r\n    // Constrain horizontal motion.\r\n    if (this.x - this.radius < 0) {\r\n      this.x = this.radius;\r\n      this.vx *= -1;\r\n    } else if (this.x + this.radius > canvas.width) {\r\n      this.x = canvas.width - this.radius;\r\n      this.vx *= -1;\r\n    }\r\n    const waveY = getWaveY(this.x);\r\n    const targetY = waveY - this.radius;\r\n    \r\n    if (this.y + this.radius <= waveY) {\r\n      // Falling phase.\r\n      this.vy += controls.gravity;\r\n      this.vx += controls.wind;\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n    } else {\r\n      // On-wave phase: use a spring-damper for smooth floating.\r\n      const springConstant = 0.05;\r\n      const damping = 0.9;\r\n      const displacement = targetY - this.y;\r\n      const force = displacement * springConstant;\r\n      this.vy = (this.vy + force) * damping;\r\n      this.y += this.vy;\r\n  \r\n      // Horizontal motion: follow the wave slope.\r\n      const delta = 1;\r\n      const y1 = getWaveY(this.x);\r\n      const y2 = getWaveY(this.x + delta);\r\n      const slope = (y2 - y1) / delta;\r\n      const theta = Math.atan(slope);\r\n      const ax = controls.gravity * Math.sin(theta);\r\n      this.vx += ax + controls.wind;\r\n      this.x += this.vx;\r\n      this.vx *= 0.995;\r\n  \r\n      if (this.y + this.radius < getWaveY(this.x) - 1) {\r\n        this.onWave = false;\r\n      }\r\n    }\r\n  \r\n    // Update trail.\r\n    this.trail.push({ x: this.x, y: this.y });\r\n    if (this.trail.length > this.trailMax) {\r\n      this.trail.shift();\r\n    }\r\n  }\r\n  draw() {\r\n    // Draw the trail with gradually smaller circles.\r\n    for (let i = 0; i < this.trail.length; i++) {\r\n      const pos = this.trail[i];\r\n      const alpha = ((i + 1) / this.trail.length) * 0.6;\r\n      const trailRadius = this.radius * ((i + 1) / this.trail.length);\r\n      ctx.save();\r\n      ctx.globalAlpha = alpha;\r\n      ctx.beginPath();\r\n      ctx.arc(pos.x, pos.y, trailRadius, 0, Math.PI * 2);\r\n      ctx.fillStyle = this.color;\r\n      ctx.fill();\r\n      ctx.restore();\r\n    }\r\n    // Draw the ball.\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill();\r\n  }\r\n  isClicked(mx, my) {\r\n    const dx = mx - this.x;\r\n    const dy = my - this.y;\r\n    return dx * dx + dy * dy <= this.radius * this.radius;\r\n  }\r\n}\r\n  \r\n// -------------------------------\r\n// Particle Class for Explosion Effects\r\n// -------------------------------\r\nclass Particle {\r\n  constructor(x, y, color) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = 3 + Math.random() * 3;\r\n    const angle = Math.random() * Math.PI * 2;\r\n    const speed = Math.random() * 4 + 1;\r\n    this.vx = Math.cos(angle) * speed;\r\n    this.vy = Math.sin(angle) * speed;\r\n    this.color = color;\r\n    this.alpha = 1;\r\n    this.friction = 0.98;\r\n    this.gravity = 0.2;\r\n  }\r\n  update() {\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n    this.vx *= this.friction;\r\n    this.vy *= this.friction;\r\n    this.vy += this.gravity;\r\n    this.alpha -= 0.02;\r\n    if (this.alpha < 0) this.alpha = 0;\r\n  }\r\n  draw() {\r\n    ctx.save();\r\n    ctx.globalAlpha = this.alpha;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n  isDead() {\r\n    return this.alpha <= 0;\r\n  }\r\n}\r\n  \r\nlet balls = [];\r\nlet particles = [];\r\n  \r\n// -------------------------------\r\n// User Interactions\r\n// -------------------------------\r\ncanvas.addEventListener(\"contextmenu\", function (e) {\r\n  e.preventDefault();\r\n  const x = e.clientX;\r\n  const ball = new Ball(x);\r\n  balls.push(ball);\r\n});\r\n  \r\ncanvas.addEventListener(\"click\", function (e) {\r\n  const clickedX = e.clientX;\r\n  const clickedY = e.clientY;\r\n  for (let i = balls.length - 1; i >= 0; i--) {\r\n    if (balls[i].isClicked(clickedX, clickedY)) {\r\n      createExplosion(balls[i]);\r\n      balls.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n});\r\n  \r\nfunction createExplosion(ball) {\r\n  const numParticles = 20 + Math.floor(Math.random() * 10);\r\n  for (let i = 0; i < numParticles; i++) {\r\n    const particle = new Particle(ball.x, ball.y, ball.color);\r\n    particles.push(particle);\r\n  }\r\n}\r\n  \r\n// -------------------------------\r\n// Simple Collision Handling Between Balls using Realistic Collision Resolution\r\n// -------------------------------\r\nfunction getDistance(x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n  \r\nfunction rotate(velocity, angle) {\r\n  return {\r\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\r\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\r\n  };\r\n}\r\n  \r\nfunction resolveCollision(ball, otherBall) {\r\n  const xVelocityDiff = ball.vx - otherBall.vx;\r\n  const yVelocityDiff = ball.vy - otherBall.vy;\r\n  const xDist = otherBall.x - ball.x;\r\n  const yDist = otherBall.y - ball.y;\r\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n    const angle = -Math.atan2(otherBall.y - ball.y, otherBall.x - ball.x);\r\n    const m1 = ball.mass;\r\n    const m2 = otherBall.mass;\r\n    const u1 = rotate({ x: ball.vx, y: ball.vy }, angle);\r\n    const u2 = rotate({ x: otherBall.vx, y: otherBall.vy }, angle);\r\n    const v1 = {\r\n      x: (u1.x * (m1 - m2) + 2 * m2 * u2.x) / (m1 + m2),\r\n      y: u1.y\r\n    };\r\n    const v2 = {\r\n      x: (u2.x * (m2 - m1) + 2 * m1 * u1.x) / (m1 + m2),\r\n      y: u2.y\r\n    };\r\n    const finalV1 = rotate(v1, -angle);\r\n    const finalV2 = rotate(v2, -angle);\r\n    ball.vx = finalV1.x;\r\n    ball.vy = finalV1.y;\r\n    otherBall.vx = finalV2.x;\r\n    otherBall.vy = finalV2.y;\r\n  }\r\n}\r\n  \r\nfunction handleCollisions() {\r\n  for (let i = 0; i < balls.length; i++) {\r\n    for (let j = i + 1; j < balls.length; j++) {\r\n      const ballA = balls[i];\r\n      const ballB = balls[j];\r\n      if (getDistance(ballA.x, ballA.y, ballB.x, ballB.y) < ballA.radius + ballB.radius) {\r\n        resolveCollision(ballA, ballB);\r\n      }\r\n    }\r\n  }\r\n}\r\n  \r\n// -------------------------------\r\n// Main Animation Loop\r\n// -------------------------------\r\nfunction animate() {\r\n  requestAnimationFrame(animate);\r\n  clearScreen();\r\n  drawWave();\r\n  for (let ball of balls) {\r\n    ball.update();\r\n  }\r\n  handleCollisions();\r\n  for (let ball of balls) {\r\n    ball.draw();\r\n  }\r\n  for (let i = particles.length - 1; i >= 0; i--) {\r\n    particles[i].update();\r\n    particles[i].draw();\r\n    if (particles[i].isDead()) {\r\n      particles.splice(i, 1);\r\n    }\r\n  }\r\n}\r\nanimate();\r\n  \r\n// -------------------------------\r\n// dat.GUI Controls\r\n// -------------------------------\r\nloadScript(\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js\", function () {\r\n  const gui = new dat.GUI();\r\n  gui.add(controls, \"waveAmplitude\", 50, 300).onChange((value) => {\r\n    wave.amplitude = value;\r\n  });\r\n  gui.add(controls, \"waveFrequency\", 0.001, 0.05).onChange((value) => {\r\n    wave.frequency = value;\r\n  });\r\n  gui.add(controls, \"gravity\", 0.1, 2);\r\n  gui.add(controls, \"wind\", -0.2, 0.2);\r\n  gui.add(controls, \"spawnBall\").name(\"Spawn Ball\");\r\n  gui.add(controls, \"clearBalls\").name(\"Clear Balls\");\r\n});\r\n"],"names":[],"sourceRoot":""}